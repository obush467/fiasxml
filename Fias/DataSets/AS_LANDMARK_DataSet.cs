//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 

namespace Fias.DataSets
{
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Landmarks")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Landmarks : global::System.Data.DataSet
    {

        private LandmarkDataTable tableLandmark;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Landmarks()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Landmarks(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Landmark"] != null))
                {
                    base.Tables.Add(new LandmarkDataTable(ds.Tables["Landmark"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LandmarkDataTable Landmark
        {
            get
            {
                return this.tableLandmark;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            Landmarks cln = ((Landmarks)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Landmark"] != null))
                {
                    base.Tables.Add(new LandmarkDataTable(ds.Tables["Landmark"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableLandmark = ((LandmarkDataTable)(base.Tables["Landmark"]));
            if ((initTable == true))
            {
                if ((this.tableLandmark != null))
                {
                    this.tableLandmark.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "Landmarks";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLandmark = new LandmarkDataTable();
            base.Tables.Add(this.tableLandmark);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLandmark()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            Landmarks ds = new Landmarks();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void LandmarkRowChangeEventHandler(object sender, LandmarkRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LandmarkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLOCATION;

            private global::System.Data.DataColumn columnREGIONCODE;

            private global::System.Data.DataColumn columnPOSTALCODE;

            private global::System.Data.DataColumn columnIFNSFL;

            private global::System.Data.DataColumn columnTERRIFNSFL;

            private global::System.Data.DataColumn columnIFNSUL;

            private global::System.Data.DataColumn columnTERRIFNSUL;

            private global::System.Data.DataColumn columnOKATO;

            private global::System.Data.DataColumn columnOKTMO;

            private global::System.Data.DataColumn columnUPDATEDATE;

            private global::System.Data.DataColumn columnLANDID;

            private global::System.Data.DataColumn columnLANDGUID;

            private global::System.Data.DataColumn columnAOGUID;

            private global::System.Data.DataColumn columnSTARTDATE;

            private global::System.Data.DataColumn columnENDDATE;

            private global::System.Data.DataColumn columnNORMDOC;

            private global::System.Data.DataColumn columnCADNUM;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandmarkDataTable()
            {
                this.TableName = "Landmark";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LandmarkDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LandmarkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                    base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCATIONColumn
            {
                get
                {
                    return this.columnLOCATION;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGIONCODEColumn
            {
                get
                {
                    return this.columnREGIONCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTALCODEColumn
            {
                get
                {
                    return this.columnPOSTALCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSFLColumn
            {
                get
                {
                    return this.columnIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSFLColumn
            {
                get
                {
                    return this.columnTERRIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSULColumn
            {
                get
                {
                    return this.columnIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSULColumn
            {
                get
                {
                    return this.columnTERRIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKATOColumn
            {
                get
                {
                    return this.columnOKATO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKTMOColumn
            {
                get
                {
                    return this.columnOKTMO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATEDATEColumn
            {
                get
                {
                    return this.columnUPDATEDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LANDIDColumn
            {
                get
                {
                    return this.columnLANDID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LANDGUIDColumn
            {
                get
                {
                    return this.columnLANDGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AOGUIDColumn
            {
                get
                {
                    return this.columnAOGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STARTDATEColumn
            {
                get
                {
                    return this.columnSTARTDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENDDATEColumn
            {
                get
                {
                    return this.columnENDDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NORMDOCColumn
            {
                get
                {
                    return this.columnNORMDOC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CADNUMColumn
            {
                get
                {
                    return this.columnCADNUM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandmarkRow this[int index]
            {
                get
                {
                    return ((LandmarkRow)(this.Rows[index]));
                }
            }

            public event LandmarkRowChangeEventHandler LandmarkRowChanging;

            public event LandmarkRowChangeEventHandler LandmarkRowChanged;

            public event LandmarkRowChangeEventHandler LandmarkRowDeleting;

            public event LandmarkRowChangeEventHandler LandmarkRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLandmarkRow(LandmarkRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandmarkRow AddLandmarkRow(
                        string LOCATION,
                        string REGIONCODE,
                        string POSTALCODE,
                        string IFNSFL,
                        string TERRIFNSFL,
                        string IFNSUL,
                        string TERRIFNSUL,
                        string OKATO,
                        string OKTMO,
                        System.DateTime UPDATEDATE,
                        System.Guid LANDID,
                        System.Guid LANDGUID,
                        System.Guid AOGUID,
                        System.DateTime STARTDATE,
                        System.DateTime ENDDATE,
                        System.Guid NORMDOC,
                        string CADNUM)
            {
                LandmarkRow rowLandmarkRow = ((LandmarkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    LOCATION,
                    REGIONCODE,
                    POSTALCODE,
                    IFNSFL,
                    TERRIFNSFL,
                    IFNSUL,
                    TERRIFNSUL,
                    OKATO,
                    OKTMO,
                    UPDATEDATE,
                    LANDID,
                    LANDGUID,
                    AOGUID,
                    STARTDATE,
                    ENDDATE,
                    NORMDOC,
                    CADNUM};
                rowLandmarkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLandmarkRow);
                return rowLandmarkRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                LandmarkDataTable cln = ((LandmarkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LandmarkDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnLOCATION = base.Columns["LOCATION"];
                this.columnREGIONCODE = base.Columns["REGIONCODE"];
                this.columnPOSTALCODE = base.Columns["POSTALCODE"];
                this.columnIFNSFL = base.Columns["IFNSFL"];
                this.columnTERRIFNSFL = base.Columns["TERRIFNSFL"];
                this.columnIFNSUL = base.Columns["IFNSUL"];
                this.columnTERRIFNSUL = base.Columns["TERRIFNSUL"];
                this.columnOKATO = base.Columns["OKATO"];
                this.columnOKTMO = base.Columns["OKTMO"];
                this.columnUPDATEDATE = base.Columns["UPDATEDATE"];
                this.columnLANDID = base.Columns["LANDID"];
                this.columnLANDGUID = base.Columns["LANDGUID"];
                this.columnAOGUID = base.Columns["AOGUID"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnENDDATE = base.Columns["ENDDATE"];
                this.columnNORMDOC = base.Columns["NORMDOC"];
                this.columnCADNUM = base.Columns["CADNUM"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnLOCATION = new global::System.Data.DataColumn("LOCATION", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLOCATION);
                this.columnREGIONCODE = new global::System.Data.DataColumn("REGIONCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnREGIONCODE);
                this.columnPOSTALCODE = new global::System.Data.DataColumn("POSTALCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPOSTALCODE);
                this.columnIFNSFL = new global::System.Data.DataColumn("IFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSFL);
                this.columnTERRIFNSFL = new global::System.Data.DataColumn("TERRIFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSFL);
                this.columnIFNSUL = new global::System.Data.DataColumn("IFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSUL);
                this.columnTERRIFNSUL = new global::System.Data.DataColumn("TERRIFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSUL);
                this.columnOKATO = new global::System.Data.DataColumn("OKATO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKATO);
                this.columnOKTMO = new global::System.Data.DataColumn("OKTMO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKTMO);
                this.columnUPDATEDATE = new global::System.Data.DataColumn("UPDATEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUPDATEDATE);
                this.columnLANDID = new global::System.Data.DataColumn("LANDID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLANDID);
                this.columnLANDGUID = new global::System.Data.DataColumn("LANDGUID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLANDGUID);
                this.columnAOGUID = new global::System.Data.DataColumn("AOGUID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAOGUID);
                this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnENDDATE = new global::System.Data.DataColumn("ENDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnENDDATE);
                this.columnNORMDOC = new global::System.Data.DataColumn("NORMDOC", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNORMDOC);
                this.columnCADNUM = new global::System.Data.DataColumn("CADNUM", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCADNUM);
                this.columnLOCATION.AllowDBNull = true;
                this.columnLOCATION.Namespace = "";
                this.columnLOCATION.MaxLength = 500;
                this.columnREGIONCODE.AllowDBNull = true;
                this.columnREGIONCODE.Namespace = "";
                this.columnPOSTALCODE.Namespace = "";
                this.columnIFNSFL.Namespace = "";
                this.columnTERRIFNSFL.Namespace = "";
                this.columnIFNSUL.Namespace = "";
                this.columnTERRIFNSUL.Namespace = "";
                this.columnOKATO.Namespace = "";
                this.columnOKTMO.Namespace = "";
                this.columnOKTMO.MaxLength = 11;
                this.columnUPDATEDATE.AllowDBNull = false;
                this.columnUPDATEDATE.Namespace = "";
                this.columnLANDID.AllowDBNull = false;
                this.columnLANDID.Namespace = "";
                this.columnLANDGUID.AllowDBNull = false;
                this.columnLANDGUID.Namespace = "";
                this.columnAOGUID.AllowDBNull = false;
                this.columnAOGUID.Namespace = "";
                this.columnSTARTDATE.AllowDBNull = false;
                this.columnSTARTDATE.Namespace = "";
                this.columnENDDATE.AllowDBNull = false;
                this.columnENDDATE.Namespace = "";
                this.columnNORMDOC.Namespace = "";
                this.columnNORMDOC.AllowDBNull = true;
                this.columnENDDATE.AllowDBNull = true;
                this.columnCADNUM.Namespace = "";
                this.columnCADNUM.MaxLength = 100;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandmarkRow NewLandmarkRow()
            {
                return ((LandmarkRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LandmarkRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(LandmarkRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LandmarkRowChanged != null))
                {
                    this.LandmarkRowChanged(this, new LandmarkRowChangeEvent(((LandmarkRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LandmarkRowChanging != null))
                {
                    this.LandmarkRowChanging(this, new LandmarkRowChangeEvent(((LandmarkRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LandmarkRowDeleted != null))
                {
                    this.LandmarkRowDeleted(this, new LandmarkRowChangeEvent(((LandmarkRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LandmarkRowDeleting != null))
                {
                    this.LandmarkRowDeleting(this, new LandmarkRowChangeEvent(((LandmarkRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLandmarkRow(LandmarkRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Landmarks ds = new Landmarks();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LandmarkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LandmarkRow : global::System.Data.DataRow
        {

            private LandmarkDataTable tableLandmark;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LandmarkRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableLandmark = ((LandmarkDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCATION
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'LOCATION\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.LOCATIONColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGIONCODE
            {

                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.REGIONCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'REGIONCODE\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.REGIONCODEColumn] = value;
                }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTALCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.POSTALCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'POSTALCODE\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.POSTALCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.IFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSFL\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.IFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.TERRIFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSFL\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.TERRIFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.IFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSUL\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.IFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.TERRIFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSUL\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.TERRIFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKATO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.OKATOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKATO\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.OKATOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKTMO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.OKTMOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKTMO\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.OKTMOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATEDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableLandmark.UPDATEDATEColumn]));
                }
                set
                {
                    this[this.tableLandmark.UPDATEDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid LANDID
            {
                get
                {
                    return ((System.Guid)(this[this.tableLandmark.LANDIDColumn]));
                }
                set
                {
                    this[this.tableLandmark.LANDIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid LANDGUID
            {
                get
                {
                    return ((System.Guid)(this[this.tableLandmark.LANDGUIDColumn]));
                }
                set
                {
                    this[this.tableLandmark.LANDGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AOGUID
            {
                get
                {
                    return ((System.Guid)(this[this.tableLandmark.AOGUIDColumn]));
                }
                set
                {
                    this[this.tableLandmark.AOGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STARTDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableLandmark.STARTDATEColumn]));
                }
                set
                {
                    this[this.tableLandmark.STARTDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ENDDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableLandmark.ENDDATEColumn]));
                }
                set
                {
                    this[this.tableLandmark.ENDDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid NORMDOC
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableLandmark.NORMDOCColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NORMDOC\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.NORMDOCColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CADNUM
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLandmark.CADNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CADNUM\' в таблице \'Landmark\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLandmark.CADNUMColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCATIONNull()
            {
                return this.IsNull(this.tableLandmark.LOCATIONColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTALCODENull()
            {
                return this.IsNull(this.tableLandmark.POSTALCODEColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONCODENull()
            {
                return this.IsNull(this.tableLandmark.REGIONCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTALCODENull()
            {
                this[this.tableLandmark.POSTALCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCATIONNull()
            {
                this[this.tableLandmark.LOCATIONColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONCODENull()
            {
                this[this.tableLandmark.REGIONCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSFLNull()
            {
                return this.IsNull(this.tableLandmark.IFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSFLNull()
            {
                this[this.tableLandmark.IFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSFLNull()
            {
                return this.IsNull(this.tableLandmark.TERRIFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSFLNull()
            {
                this[this.tableLandmark.TERRIFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSULNull()
            {
                return this.IsNull(this.tableLandmark.IFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSULNull()
            {
                this[this.tableLandmark.IFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSULNull()
            {
                return this.IsNull(this.tableLandmark.TERRIFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSULNull()
            {
                this[this.tableLandmark.TERRIFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKATONull()
            {
                return this.IsNull(this.tableLandmark.OKATOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKATONull()
            {
                this[this.tableLandmark.OKATOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKTMONull()
            {
                return this.IsNull(this.tableLandmark.OKTMOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKTMONull()
            {
                this[this.tableLandmark.OKTMOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNORMDOCNull()
            {
                return this.IsNull(this.tableLandmark.NORMDOCColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNORMDOCNull()
            {
                this[this.tableLandmark.NORMDOCColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCADNUMNull()
            {
                return this.IsNull(this.tableLandmark.CADNUMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCADNUMNull()
            {
                this[this.tableLandmark.CADNUMColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LandmarkRowChangeEvent : global::System.EventArgs
        {

            private LandmarkRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandmarkRowChangeEvent(LandmarkRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandmarkRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}