//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 

namespace fias.XML.DataSets
{
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("HouseIntervals")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class HouseIntervals : global::System.Data.DataSet
    {

        private HouseIntervalDataTable tableHouseInterval;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HouseIntervals()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected HouseIntervals(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["HouseInterval"] != null))
                {
                    base.Tables.Add(new HouseIntervalDataTable(ds.Tables["HouseInterval"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HouseIntervalDataTable HouseInterval
        {
            get
            {
                return this.tableHouseInterval;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            HouseIntervals cln = ((HouseIntervals)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["HouseInterval"] != null))
                {
                    base.Tables.Add(new HouseIntervalDataTable(ds.Tables["HouseInterval"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableHouseInterval = ((HouseIntervalDataTable)(base.Tables["HouseInterval"]));
            if ((initTable == true))
            {
                if ((this.tableHouseInterval != null))
                {
                    this.tableHouseInterval.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "HouseIntervals";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHouseInterval = new HouseIntervalDataTable();
            base.Tables.Add(this.tableHouseInterval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHouseInterval()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            HouseIntervals ds = new HouseIntervals();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void HouseIntervalRowChangeEventHandler(object sender, HouseIntervalRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HouseIntervalDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnPOSTALCODE;

            private global::System.Data.DataColumn columnIFNSFL;

            private global::System.Data.DataColumn columnTERRIFNSFL;

            private global::System.Data.DataColumn columnIFNSUL;

            private global::System.Data.DataColumn columnTERRIFNSUL;

            private global::System.Data.DataColumn columnOKATO;

            private global::System.Data.DataColumn columnOKTMO;

            private global::System.Data.DataColumn columnUPDATEDATE;

            private global::System.Data.DataColumn columnINTSTART;

            private global::System.Data.DataColumn columnINTEND;

            private global::System.Data.DataColumn columnHOUSEINTID;

            private global::System.Data.DataColumn columnINTGUID;

            private global::System.Data.DataColumn columnAOGUID;

            private global::System.Data.DataColumn columnSTARTDATE;

            private global::System.Data.DataColumn columnENDDATE;

            private global::System.Data.DataColumn columnINTSTATUS;

            private global::System.Data.DataColumn columnNORMDOC;

            private global::System.Data.DataColumn columnCOUNTER;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HouseIntervalDataTable()
            {
                this.TableName = "HouseInterval";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HouseIntervalDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HouseIntervalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                    base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTALCODEColumn
            {
                get
                {
                    return this.columnPOSTALCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSFLColumn
            {
                get
                {
                    return this.columnIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSFLColumn
            {
                get
                {
                    return this.columnTERRIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSULColumn
            {
                get
                {
                    return this.columnIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSULColumn
            {
                get
                {
                    return this.columnTERRIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKATOColumn
            {
                get
                {
                    return this.columnOKATO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKTMOColumn
            {
                get
                {
                    return this.columnOKTMO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATEDATEColumn
            {
                get
                {
                    return this.columnUPDATEDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INTSTARTColumn
            {
                get
                {
                    return this.columnINTSTART;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INTENDColumn
            {
                get
                {
                    return this.columnINTEND;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HOUSEINTIDColumn
            {
                get
                {
                    return this.columnHOUSEINTID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INTGUIDColumn
            {
                get
                {
                    return this.columnINTGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AOGUIDColumn
            {
                get
                {
                    return this.columnAOGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STARTDATEColumn
            {
                get
                {
                    return this.columnSTARTDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENDDATEColumn
            {
                get
                {
                    return this.columnENDDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INTSTATUSColumn
            {
                get
                {
                    return this.columnINTSTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NORMDOCColumn
            {
                get
                {
                    return this.columnNORMDOC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTERColumn
            {
                get
                {
                    return this.columnCOUNTER;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HouseIntervalRow this[int index]
            {
                get
                {
                    return ((HouseIntervalRow)(this.Rows[index]));
                }
            }

            public event HouseIntervalRowChangeEventHandler HouseIntervalRowChanging;

            public event HouseIntervalRowChangeEventHandler HouseIntervalRowChanged;

            public event HouseIntervalRowChangeEventHandler HouseIntervalRowDeleting;

            public event HouseIntervalRowChangeEventHandler HouseIntervalRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHouseIntervalRow(HouseIntervalRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HouseIntervalRow AddHouseIntervalRow(
                        string POSTALCODE,
                        string IFNSFL,
                        string TERRIFNSFL,
                        string IFNSUL,
                        string TERRIFNSUL,
                        string OKATO,
                        string OKTMO,
                        System.DateTime UPDATEDATE,
                        long INTSTART,
                        long INTEND,
                        string HOUSEINTID,
                        System.Guid INTGUID,
                        System.Guid AOGUID,
                        System.DateTime STARTDATE,
                        System.DateTime ENDDATE,
                        long INTSTATUS,
                        System.Guid NORMDOC,
                        long COUNTER)
            {
                HouseIntervalRow rowHouseIntervalRow = ((HouseIntervalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    POSTALCODE,
                    IFNSFL,
                    TERRIFNSFL,
                    IFNSUL,
                    TERRIFNSUL,
                    OKATO,
                    OKTMO,
                    UPDATEDATE,
                    INTSTART,
                    INTEND,
                    HOUSEINTID,
                    INTGUID,
                    AOGUID,
                    STARTDATE,
                    ENDDATE,
                    INTSTATUS,
                    NORMDOC,
                    COUNTER};
                rowHouseIntervalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHouseIntervalRow);
                return rowHouseIntervalRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                HouseIntervalDataTable cln = ((HouseIntervalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new HouseIntervalDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnPOSTALCODE = base.Columns["POSTALCODE"];
                this.columnIFNSFL = base.Columns["IFNSFL"];
                this.columnTERRIFNSFL = base.Columns["TERRIFNSFL"];
                this.columnIFNSUL = base.Columns["IFNSUL"];
                this.columnTERRIFNSUL = base.Columns["TERRIFNSUL"];
                this.columnOKATO = base.Columns["OKATO"];
                this.columnOKTMO = base.Columns["OKTMO"];
                this.columnUPDATEDATE = base.Columns["UPDATEDATE"];
                this.columnINTSTART = base.Columns["INTSTART"];
                this.columnINTEND = base.Columns["INTEND"];
                this.columnHOUSEINTID = base.Columns["HOUSEINTID"];
                this.columnINTGUID = base.Columns["INTGUID"];
                this.columnAOGUID = base.Columns["AOGUID"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnENDDATE = base.Columns["ENDDATE"];
                this.columnINTSTATUS = base.Columns["INTSTATUS"];
                this.columnNORMDOC = base.Columns["NORMDOC"];
                this.columnCOUNTER = base.Columns["COUNTER"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnPOSTALCODE = new global::System.Data.DataColumn("POSTALCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPOSTALCODE);
                this.columnIFNSFL = new global::System.Data.DataColumn("IFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSFL);
                this.columnTERRIFNSFL = new global::System.Data.DataColumn("TERRIFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSFL);
                this.columnIFNSUL = new global::System.Data.DataColumn("IFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSUL);
                this.columnTERRIFNSUL = new global::System.Data.DataColumn("TERRIFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSUL);
                this.columnOKATO = new global::System.Data.DataColumn("OKATO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKATO);
                this.columnOKTMO = new global::System.Data.DataColumn("OKTMO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKTMO);
                this.columnUPDATEDATE = new global::System.Data.DataColumn("UPDATEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUPDATEDATE);
                this.columnINTSTART = new global::System.Data.DataColumn("INTSTART", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnINTSTART);
                this.columnINTEND = new global::System.Data.DataColumn("INTEND", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnINTEND);
                this.columnHOUSEINTID = new global::System.Data.DataColumn("HOUSEINTID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHOUSEINTID);
                this.columnINTGUID = new global::System.Data.DataColumn("INTGUID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnINTGUID);
                this.columnAOGUID = new global::System.Data.DataColumn("AOGUID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAOGUID);
                this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnENDDATE = new global::System.Data.DataColumn("ENDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnENDDATE);
                this.columnINTSTATUS = new global::System.Data.DataColumn("INTSTATUS", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnINTSTATUS);
                this.columnNORMDOC = new global::System.Data.DataColumn("NORMDOC", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNORMDOC);
                this.columnCOUNTER = new global::System.Data.DataColumn("COUNTER", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCOUNTER);
                this.columnPOSTALCODE.Namespace = "";
                this.columnIFNSFL.Namespace = "";
                this.columnTERRIFNSFL.Namespace = "";
                this.columnIFNSUL.Namespace = "";
                this.columnTERRIFNSUL.Namespace = "";
                this.columnOKATO.Namespace = "";
                this.columnOKTMO.Namespace = "";
                this.columnOKTMO.MaxLength = 11;
                this.columnUPDATEDATE.AllowDBNull = false;
                this.columnUPDATEDATE.Namespace = "";
                this.columnINTSTART.AllowDBNull = false;
                this.columnINTSTART.Namespace = "";
                this.columnINTEND.AllowDBNull = false;
                this.columnINTEND.Namespace = "";
                this.columnHOUSEINTID.AllowDBNull = false;
                this.columnHOUSEINTID.Namespace = "";
                this.columnINTGUID.AllowDBNull = false;
                this.columnINTGUID.Namespace = "";
                this.columnAOGUID.AllowDBNull = false;
                this.columnAOGUID.Namespace = "";
                this.columnSTARTDATE.AllowDBNull = false;
                this.columnSTARTDATE.Namespace = "";
                this.columnENDDATE.AllowDBNull = false;
                this.columnENDDATE.Namespace = "";
                this.columnINTSTATUS.AllowDBNull = false;
                this.columnINTSTATUS.Namespace = "";
                this.columnNORMDOC.Namespace = "";
                this.columnCOUNTER.AllowDBNull = false;
                this.columnCOUNTER.Namespace = "";
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HouseIntervalRow NewHouseIntervalRow()
            {
                return ((HouseIntervalRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new HouseIntervalRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(HouseIntervalRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.HouseIntervalRowChanged != null))
                {
                    this.HouseIntervalRowChanged(this, new HouseIntervalRowChangeEvent(((HouseIntervalRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.HouseIntervalRowChanging != null))
                {
                    this.HouseIntervalRowChanging(this, new HouseIntervalRowChangeEvent(((HouseIntervalRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.HouseIntervalRowDeleted != null))
                {
                    this.HouseIntervalRowDeleted(this, new HouseIntervalRowChangeEvent(((HouseIntervalRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.HouseIntervalRowDeleting != null))
                {
                    this.HouseIntervalRowDeleting(this, new HouseIntervalRowChangeEvent(((HouseIntervalRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHouseIntervalRow(HouseIntervalRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HouseIntervals ds = new HouseIntervals();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HouseIntervalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HouseIntervalRow : global::System.Data.DataRow
        {

            private HouseIntervalDataTable tableHouseInterval;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HouseIntervalRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableHouseInterval = ((HouseIntervalDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTALCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.POSTALCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'POSTALCODE\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.POSTALCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.IFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSFL\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.IFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.TERRIFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSFL\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.TERRIFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.IFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSUL\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.IFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.TERRIFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSUL\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.TERRIFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKATO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.OKATOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKATO\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.OKATOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKTMO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHouseInterval.OKTMOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKTMO\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.OKTMOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATEDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableHouseInterval.UPDATEDATEColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.UPDATEDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long INTSTART
            {
                get
                {
                    return ((long)(this[this.tableHouseInterval.INTSTARTColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.INTSTARTColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long INTEND
            {
                get
                {
                    return ((long)(this[this.tableHouseInterval.INTENDColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.INTENDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid HOUSEINTID
            {
                get
                {
                    return ((System.Guid)(this[this.tableHouseInterval.HOUSEINTIDColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.HOUSEINTIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid INTGUID
            {
                get
                {
                    return ((System.Guid)(this[this.tableHouseInterval.INTGUIDColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.INTGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AOGUID
            {
                get
                {
                    return ((System.Guid)(this[this.tableHouseInterval.AOGUIDColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.AOGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STARTDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableHouseInterval.STARTDATEColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.STARTDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ENDDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableHouseInterval.ENDDATEColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.ENDDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long INTSTATUS
            {
                get
                {
                    return ((long)(this[this.tableHouseInterval.INTSTATUSColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.INTSTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid NORMDOC
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableHouseInterval.NORMDOCColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NORMDOC\' в таблице \'HouseInterval\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHouseInterval.NORMDOCColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long COUNTER
            {
                get
                {
                    return ((long)(this[this.tableHouseInterval.COUNTERColumn]));
                }
                set
                {
                    this[this.tableHouseInterval.COUNTERColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTALCODENull()
            {
                return this.IsNull(this.tableHouseInterval.POSTALCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTALCODENull()
            {
                this[this.tableHouseInterval.POSTALCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSFLNull()
            {
                return this.IsNull(this.tableHouseInterval.IFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSFLNull()
            {
                this[this.tableHouseInterval.IFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSFLNull()
            {
                return this.IsNull(this.tableHouseInterval.TERRIFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSFLNull()
            {
                this[this.tableHouseInterval.TERRIFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSULNull()
            {
                return this.IsNull(this.tableHouseInterval.IFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSULNull()
            {
                this[this.tableHouseInterval.IFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSULNull()
            {
                return this.IsNull(this.tableHouseInterval.TERRIFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSULNull()
            {
                this[this.tableHouseInterval.TERRIFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKATONull()
            {
                return this.IsNull(this.tableHouseInterval.OKATOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKATONull()
            {
                this[this.tableHouseInterval.OKATOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKTMONull()
            {
                return this.IsNull(this.tableHouseInterval.OKTMOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKTMONull()
            {
                this[this.tableHouseInterval.OKTMOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNORMDOCNull()
            {
                return this.IsNull(this.tableHouseInterval.NORMDOCColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNORMDOCNull()
            {
                this[this.tableHouseInterval.NORMDOCColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HouseIntervalRowChangeEvent : global::System.EventArgs
        {

            private HouseIntervalRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HouseIntervalRowChangeEvent(HouseIntervalRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HouseIntervalRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
