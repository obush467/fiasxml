//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 

namespace fiasxml.DataSets
{
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Steads")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Steads : global::System.Data.DataSet
    {

        private SteadDataTable tableStead;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Steads()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Steads(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Stead"] != null))
                {
                    base.Tables.Add(new SteadDataTable(ds.Tables["Stead"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SteadDataTable Stead
        {
            get
            {
                return this.tableStead;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            Steads cln = ((Steads)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Stead"] != null))
                {
                    base.Tables.Add(new SteadDataTable(ds.Tables["Stead"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableStead = ((SteadDataTable)(base.Tables["Stead"]));
            if ((initTable == true))
            {
                if ((this.tableStead != null))
                {
                    this.tableStead.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "Steads";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStead = new SteadDataTable();
            base.Tables.Add(this.tableStead);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStead()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            Steads ds = new Steads();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void SteadRowChangeEventHandler(object sender, SteadRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SteadDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnSTEADGUID;

            private global::System.Data.DataColumn columnNUMBER;

            private global::System.Data.DataColumn columnREGIONCODE;

            private global::System.Data.DataColumn columnPOSTALCODE;

            private global::System.Data.DataColumn columnIFNSFL;

            private global::System.Data.DataColumn columnTERRIFNSFL;

            private global::System.Data.DataColumn columnIFNSUL;

            private global::System.Data.DataColumn columnTERRIFNSUL;

            private global::System.Data.DataColumn columnOKATO;

            private global::System.Data.DataColumn columnOKTMO;

            private global::System.Data.DataColumn columnUPDATEDATE;

            private global::System.Data.DataColumn columnPARENTGUID;

            private global::System.Data.DataColumn columnSTEADID;

            private global::System.Data.DataColumn columnPREVID;

            private global::System.Data.DataColumn columnNEXTID;

            private global::System.Data.DataColumn columnOPERSTATUS;

            private global::System.Data.DataColumn columnSTARTDATE;

            private global::System.Data.DataColumn columnENDDATE;

            private global::System.Data.DataColumn columnNORMDOC;

            private global::System.Data.DataColumn columnLIVESTATUS;

            private global::System.Data.DataColumn columnCADNUM;

            private global::System.Data.DataColumn columnDIVTYPE;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadDataTable()
            {
                this.TableName = "Stead";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SteadDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SteadDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                    base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STEADGUIDColumn
            {
                get
                {
                    return this.columnSTEADGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBERColumn
            {
                get
                {
                    return this.columnNUMBER;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGIONCODEColumn
            {
                get
                {
                    return this.columnREGIONCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTALCODEColumn
            {
                get
                {
                    return this.columnPOSTALCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSFLColumn
            {
                get
                {
                    return this.columnIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSFLColumn
            {
                get
                {
                    return this.columnTERRIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSULColumn
            {
                get
                {
                    return this.columnIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSULColumn
            {
                get
                {
                    return this.columnTERRIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKATOColumn
            {
                get
                {
                    return this.columnOKATO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKTMOColumn
            {
                get
                {
                    return this.columnOKTMO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATEDATEColumn
            {
                get
                {
                    return this.columnUPDATEDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARENTGUIDColumn
            {
                get
                {
                    return this.columnPARENTGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STEADIDColumn
            {
                get
                {
                    return this.columnSTEADID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREVIDColumn
            {
                get
                {
                    return this.columnPREVID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NEXTIDColumn
            {
                get
                {
                    return this.columnNEXTID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERSTATUSColumn
            {
                get
                {
                    return this.columnOPERSTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STARTDATEColumn
            {
                get
                {
                    return this.columnSTARTDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENDDATEColumn
            {
                get
                {
                    return this.columnENDDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NORMDOCColumn
            {
                get
                {
                    return this.columnNORMDOC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIVESTATUSColumn
            {
                get
                {
                    return this.columnLIVESTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CADNUMColumn
            {
                get
                {
                    return this.columnCADNUM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIVTYPEColumn
            {
                get
                {
                    return this.columnDIVTYPE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadRow this[int index]
            {
                get
                {
                    return ((SteadRow)(this.Rows[index]));
                }
            }

            public event SteadRowChangeEventHandler SteadRowChanging;

            public event SteadRowChangeEventHandler SteadRowChanged;

            public event SteadRowChangeEventHandler SteadRowDeleting;

            public event SteadRowChangeEventHandler SteadRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSteadRow(SteadRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadRow AddSteadRow(
                        string STEADGUID,
                        string NUMBER,
                        string REGIONCODE,
                        string POSTALCODE,
                        string IFNSFL,
                        string TERRIFNSFL,
                        string IFNSUL,
                        string TERRIFNSUL,
                        string OKATO,
                        string OKTMO,
                        System.DateTime UPDATEDATE,
                        string PARENTGUID,
                        string STEADID,
                        string PREVID,
                        string NEXTID,
                        long OPERSTATUS,
                        System.DateTime STARTDATE,
                        System.DateTime ENDDATE,
                        string NORMDOC,
                        sbyte LIVESTATUS,
                        string CADNUM,
                        int DIVTYPE)
            {
                SteadRow rowSteadRow = ((SteadRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    STEADGUID,
                    NUMBER,
                    REGIONCODE,
                    POSTALCODE,
                    IFNSFL,
                    TERRIFNSFL,
                    IFNSUL,
                    TERRIFNSUL,
                    OKATO,
                    OKTMO,
                    UPDATEDATE,
                    PARENTGUID,
                    STEADID,
                    PREVID,
                    NEXTID,
                    OPERSTATUS,
                    STARTDATE,
                    ENDDATE,
                    NORMDOC,
                    LIVESTATUS,
                    CADNUM,
                    DIVTYPE};
                rowSteadRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSteadRow);
                return rowSteadRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                SteadDataTable cln = ((SteadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new SteadDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnSTEADGUID = base.Columns["STEADGUID"];
                this.columnNUMBER = base.Columns["NUMBER"];
                this.columnREGIONCODE = base.Columns["REGIONCODE"];
                this.columnPOSTALCODE = base.Columns["POSTALCODE"];
                this.columnIFNSFL = base.Columns["IFNSFL"];
                this.columnTERRIFNSFL = base.Columns["TERRIFNSFL"];
                this.columnIFNSUL = base.Columns["IFNSUL"];
                this.columnTERRIFNSUL = base.Columns["TERRIFNSUL"];
                this.columnOKATO = base.Columns["OKATO"];
                this.columnOKTMO = base.Columns["OKTMO"];
                this.columnUPDATEDATE = base.Columns["UPDATEDATE"];
                this.columnPARENTGUID = base.Columns["PARENTGUID"];
                this.columnSTEADID = base.Columns["STEADID"];
                this.columnPREVID = base.Columns["PREVID"];
                this.columnNEXTID = base.Columns["NEXTID"];
                this.columnOPERSTATUS = base.Columns["OPERSTATUS"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnENDDATE = base.Columns["ENDDATE"];
                this.columnNORMDOC = base.Columns["NORMDOC"];
                this.columnLIVESTATUS = base.Columns["LIVESTATUS"];
                this.columnCADNUM = base.Columns["CADNUM"];
                this.columnDIVTYPE = base.Columns["DIVTYPE"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnSTEADGUID = new global::System.Data.DataColumn("STEADGUID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTEADGUID);
                this.columnNUMBER = new global::System.Data.DataColumn("NUMBER", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNUMBER);
                this.columnREGIONCODE = new global::System.Data.DataColumn("REGIONCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnREGIONCODE);
                this.columnPOSTALCODE = new global::System.Data.DataColumn("POSTALCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPOSTALCODE);
                this.columnIFNSFL = new global::System.Data.DataColumn("IFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSFL);
                this.columnTERRIFNSFL = new global::System.Data.DataColumn("TERRIFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSFL);
                this.columnIFNSUL = new global::System.Data.DataColumn("IFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSUL);
                this.columnTERRIFNSUL = new global::System.Data.DataColumn("TERRIFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSUL);
                this.columnOKATO = new global::System.Data.DataColumn("OKATO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKATO);
                this.columnOKTMO = new global::System.Data.DataColumn("OKTMO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKTMO);
                this.columnUPDATEDATE = new global::System.Data.DataColumn("UPDATEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUPDATEDATE);
                this.columnPARENTGUID = new global::System.Data.DataColumn("PARENTGUID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPARENTGUID);
                this.columnSTEADID = new global::System.Data.DataColumn("STEADID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTEADID);
                this.columnPREVID = new global::System.Data.DataColumn("PREVID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPREVID);
                this.columnNEXTID = new global::System.Data.DataColumn("NEXTID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNEXTID);
                this.columnOPERSTATUS = new global::System.Data.DataColumn("OPERSTATUS", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOPERSTATUS);
                this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnENDDATE = new global::System.Data.DataColumn("ENDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnENDDATE);
                this.columnNORMDOC = new global::System.Data.DataColumn("NORMDOC", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNORMDOC);
                this.columnLIVESTATUS = new global::System.Data.DataColumn("LIVESTATUS", typeof(sbyte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLIVESTATUS);
                this.columnCADNUM = new global::System.Data.DataColumn("CADNUM", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCADNUM);
                this.columnDIVTYPE = new global::System.Data.DataColumn("DIVTYPE", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDIVTYPE);
                this.columnSTEADGUID.AllowDBNull = false;
                this.columnSTEADGUID.Namespace = "";
                this.columnNUMBER.Namespace = "";
                this.columnNUMBER.MaxLength = 120;
                this.columnREGIONCODE.AllowDBNull = false;
                this.columnREGIONCODE.Namespace = "";
                this.columnPOSTALCODE.Namespace = "";
                this.columnIFNSFL.Namespace = "";
                this.columnTERRIFNSFL.Namespace = "";
                this.columnIFNSUL.Namespace = "";
                this.columnTERRIFNSUL.Namespace = "";
                this.columnOKATO.Namespace = "";
                this.columnOKTMO.Namespace = "";
                this.columnOKTMO.MaxLength = 11;
                this.columnUPDATEDATE.AllowDBNull = false;
                this.columnUPDATEDATE.Namespace = "";
                this.columnPARENTGUID.Namespace = "";
                this.columnSTEADID.AllowDBNull = false;
                this.columnSTEADID.Namespace = "";
                this.columnPREVID.Namespace = "";
                this.columnNEXTID.Namespace = "";
                this.columnOPERSTATUS.AllowDBNull = false;
                this.columnOPERSTATUS.Namespace = "";
                this.columnSTARTDATE.AllowDBNull = false;
                this.columnSTARTDATE.Namespace = "";
                this.columnENDDATE.AllowDBNull = false;
                this.columnENDDATE.Namespace = "";
                this.columnNORMDOC.Namespace = "";
                this.columnLIVESTATUS.AllowDBNull = false;
                this.columnLIVESTATUS.Namespace = "";
                this.columnCADNUM.Namespace = "";
                this.columnCADNUM.MaxLength = 100;
                this.columnDIVTYPE.AllowDBNull = false;
                this.columnDIVTYPE.Namespace = "";
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadRow NewSteadRow()
            {
                return ((SteadRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new SteadRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(SteadRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SteadRowChanged != null))
                {
                    this.SteadRowChanged(this, new SteadRowChangeEvent(((SteadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SteadRowChanging != null))
                {
                    this.SteadRowChanging(this, new SteadRowChangeEvent(((SteadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SteadRowDeleted != null))
                {
                    this.SteadRowDeleted(this, new SteadRowChangeEvent(((SteadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SteadRowDeleting != null))
                {
                    this.SteadRowDeleting(this, new SteadRowChangeEvent(((SteadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSteadRow(SteadRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Steads ds = new Steads();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SteadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SteadRow : global::System.Data.DataRow
        {

            private SteadDataTable tableStead;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SteadRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableStead = ((SteadDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STEADGUID
            {
                get
                {
                    return ((string)(this[this.tableStead.STEADGUIDColumn]));
                }
                set
                {
                    this[this.tableStead.STEADGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NUMBER\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.NUMBERColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGIONCODE
            {
                get
                {
                    return ((string)(this[this.tableStead.REGIONCODEColumn]));
                }
                set
                {
                    this[this.tableStead.REGIONCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTALCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.POSTALCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'POSTALCODE\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.POSTALCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.IFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSFL\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.IFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.TERRIFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSFL\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.TERRIFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.IFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSUL\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.IFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.TERRIFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSUL\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.TERRIFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKATO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.OKATOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKATO\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.OKATOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKTMO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.OKTMOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKTMO\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.OKTMOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATEDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableStead.UPDATEDATEColumn]));
                }
                set
                {
                    this[this.tableStead.UPDATEDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARENTGUID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.PARENTGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'PARENTGUID\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.PARENTGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STEADID
            {
                get
                {
                    return ((string)(this[this.tableStead.STEADIDColumn]));
                }
                set
                {
                    this[this.tableStead.STEADIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREVID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.PREVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'PREVID\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.PREVIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NEXTID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.NEXTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NEXTID\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.NEXTIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OPERSTATUS
            {
                get
                {
                    return ((long)(this[this.tableStead.OPERSTATUSColumn]));
                }
                set
                {
                    this[this.tableStead.OPERSTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STARTDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableStead.STARTDATEColumn]));
                }
                set
                {
                    this[this.tableStead.STARTDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ENDDATE
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableStead.ENDDATEColumn]));
                }
                set
                {
                    this[this.tableStead.ENDDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NORMDOC
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.NORMDOCColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NORMDOC\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.NORMDOCColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sbyte LIVESTATUS
            {
                get
                {
                    return ((sbyte)(this[this.tableStead.LIVESTATUSColumn]));
                }
                set
                {
                    this[this.tableStead.LIVESTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CADNUM
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStead.CADNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CADNUM\' в таблице \'Stead\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStead.CADNUMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DIVTYPE
            {
                get
                {
                    return ((int)(this[this.tableStead.DIVTYPEColumn]));
                }
                set
                {
                    this[this.tableStead.DIVTYPEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBERNull()
            {
                return this.IsNull(this.tableStead.NUMBERColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBERNull()
            {
                this[this.tableStead.NUMBERColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTALCODENull()
            {
                return this.IsNull(this.tableStead.POSTALCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTALCODENull()
            {
                this[this.tableStead.POSTALCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSFLNull()
            {
                return this.IsNull(this.tableStead.IFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSFLNull()
            {
                this[this.tableStead.IFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSFLNull()
            {
                return this.IsNull(this.tableStead.TERRIFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSFLNull()
            {
                this[this.tableStead.TERRIFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSULNull()
            {
                return this.IsNull(this.tableStead.IFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSULNull()
            {
                this[this.tableStead.IFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSULNull()
            {
                return this.IsNull(this.tableStead.TERRIFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSULNull()
            {
                this[this.tableStead.TERRIFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKATONull()
            {
                return this.IsNull(this.tableStead.OKATOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKATONull()
            {
                this[this.tableStead.OKATOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKTMONull()
            {
                return this.IsNull(this.tableStead.OKTMOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKTMONull()
            {
                this[this.tableStead.OKTMOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARENTGUIDNull()
            {
                return this.IsNull(this.tableStead.PARENTGUIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARENTGUIDNull()
            {
                this[this.tableStead.PARENTGUIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREVIDNull()
            {
                return this.IsNull(this.tableStead.PREVIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREVIDNull()
            {
                this[this.tableStead.PREVIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNEXTIDNull()
            {
                return this.IsNull(this.tableStead.NEXTIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNEXTIDNull()
            {
                this[this.tableStead.NEXTIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNORMDOCNull()
            {
                return this.IsNull(this.tableStead.NORMDOCColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNORMDOCNull()
            {
                this[this.tableStead.NORMDOCColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCADNUMNull()
            {
                return this.IsNull(this.tableStead.CADNUMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCADNUMNull()
            {
                this[this.tableStead.CADNUMColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SteadRowChangeEvent : global::System.EventArgs
        {

            private SteadRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadRowChangeEvent(SteadRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}