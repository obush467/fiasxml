//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 

namespace fiasxml.DataSets
{ /// <summary>
  ///Represents a strongly typed in-memory cache of data.
  ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.Serializable()]
    [global::System.ComponentModel.DesignerCategory("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("AddressObjects")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AddressObjects : global::System.Data.DataSet
    {

        private ObjectDataTable tableObject;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AddressObjects()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AddressObjects(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Object"] != null))
                {
                    base.Tables.Add(new ObjectDataTable(ds.Tables["Object"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ObjectDataTable Object
        {
            get
            {
                return this.tableObject;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            AddressObjects cln = ((AddressObjects)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Object"] != null))
                {
                    base.Tables.Add(new ObjectDataTable(ds.Tables["Object"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableObject = ((ObjectDataTable)(base.Tables["Object"]));
            if ((initTable == true))
            {
                if ((this.tableObject != null))
                {
                    this.tableObject.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "AddressObjects";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableObject = new ObjectDataTable();
            base.Tables.Add(this.tableObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeObject()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            AddressObjects ds = new AddressObjects();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void ObjectRowChangeEventHandler(object sender, ObjectRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ObjectDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnAOGUID;

            private global::System.Data.DataColumn columnFORMALNAME;

            private global::System.Data.DataColumn columnREGIONCODE;

            private global::System.Data.DataColumn columnAUTOCODE;

            private global::System.Data.DataColumn columnAREACODE;

            private global::System.Data.DataColumn columnCITYCODE;

            private global::System.Data.DataColumn columnCTARCODE;

            private global::System.Data.DataColumn columnPLACECODE;

            private global::System.Data.DataColumn columnSTREETCODE;

            private global::System.Data.DataColumn columnEXTRCODE;

            private global::System.Data.DataColumn columnSEXTCODE;

            private global::System.Data.DataColumn columnOFFNAME;

            private global::System.Data.DataColumn columnPOSTALCODE;

            private global::System.Data.DataColumn columnIFNSFL;

            private global::System.Data.DataColumn columnTERRIFNSFL;

            private global::System.Data.DataColumn columnIFNSUL;

            private global::System.Data.DataColumn columnTERRIFNSUL;

            private global::System.Data.DataColumn columnOKATO;

            private global::System.Data.DataColumn columnOKTMO;

            private global::System.Data.DataColumn columnUPDATEDATE;

            private global::System.Data.DataColumn columnSHORTNAME;

            private global::System.Data.DataColumn columnAOLEVEL;

            private global::System.Data.DataColumn columnPARENTGUID;

            private global::System.Data.DataColumn columnAOID;

            private global::System.Data.DataColumn columnPREVID;

            private global::System.Data.DataColumn columnNEXTID;

            private global::System.Data.DataColumn columnCODE;

            private global::System.Data.DataColumn columnPLAINCODE;

            private global::System.Data.DataColumn columnACTSTATUS;

            private global::System.Data.DataColumn columnCENTSTATUS;

            private global::System.Data.DataColumn columnOPERSTATUS;

            private global::System.Data.DataColumn columnCURRSTATUS;

            private global::System.Data.DataColumn columnSTARTDATE;

            private global::System.Data.DataColumn columnENDDATE;

            private global::System.Data.DataColumn columnNORMDOC;

            private global::System.Data.DataColumn columnLIVESTATUS;

            private global::System.Data.DataColumn columnCADNUM;

            private global::System.Data.DataColumn columnDIVTYPE;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectDataTable()
            {
                this.TableName = "Object";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObjectDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ObjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                    base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AOGUIDColumn
            {
                get
                {
                    return this.columnAOGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORMALNAMEColumn
            {
                get
                {
                    return this.columnFORMALNAME;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGIONCODEColumn
            {
                get
                {
                    return this.columnREGIONCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AUTOCODEColumn
            {
                get
                {
                    return this.columnAUTOCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AREACODEColumn
            {
                get
                {
                    return this.columnAREACODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYCODEColumn
            {
                get
                {
                    return this.columnCITYCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CTARCODEColumn
            {
                get
                {
                    return this.columnCTARCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLACECODEColumn
            {
                get
                {
                    return this.columnPLACECODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STREETCODEColumn
            {
                get
                {
                    return this.columnSTREETCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTRCODEColumn
            {
                get
                {
                    return this.columnEXTRCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SEXTCODEColumn
            {
                get
                {
                    return this.columnSEXTCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFFNAMEColumn
            {
                get
                {
                    return this.columnOFFNAME;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTALCODEColumn
            {
                get
                {
                    return this.columnPOSTALCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSFLColumn
            {
                get
                {
                    return this.columnIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSFLColumn
            {
                get
                {
                    return this.columnTERRIFNSFL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IFNSULColumn
            {
                get
                {
                    return this.columnIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TERRIFNSULColumn
            {
                get
                {
                    return this.columnTERRIFNSUL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKATOColumn
            {
                get
                {
                    return this.columnOKATO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OKTMOColumn
            {
                get
                {
                    return this.columnOKTMO;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATEDATEColumn
            {
                get
                {
                    return this.columnUPDATEDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHORTNAMEColumn
            {
                get
                {
                    return this.columnSHORTNAME;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AOLEVELColumn
            {
                get
                {
                    return this.columnAOLEVEL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARENTGUIDColumn
            {
                get
                {
                    return this.columnPARENTGUID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AOIDColumn
            {
                get
                {
                    return this.columnAOID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREVIDColumn
            {
                get
                {
                    return this.columnPREVID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NEXTIDColumn
            {
                get
                {
                    return this.columnNEXTID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn
            {
                get
                {
                    return this.columnCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAINCODEColumn
            {
                get
                {
                    return this.columnPLAINCODE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTSTATUSColumn
            {
                get
                {
                    return this.columnACTSTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CENTSTATUSColumn
            {
                get
                {
                    return this.columnCENTSTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERSTATUSColumn
            {
                get
                {
                    return this.columnOPERSTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CURRSTATUSColumn
            {
                get
                {
                    return this.columnCURRSTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STARTDATEColumn
            {
                get
                {
                    return this.columnSTARTDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENDDATEColumn
            {
                get
                {
                    return this.columnENDDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NORMDOCColumn
            {
                get
                {
                    return this.columnNORMDOC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIVESTATUSColumn
            {
                get
                {
                    return this.columnLIVESTATUS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CADNUMColumn
            {
                get
                {
                    return this.columnCADNUM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIVTYPEColumn
            {
                get
                {
                    return this.columnDIVTYPE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow this[int index]
            {
                get
                {
                    return ((ObjectRow)(this.Rows[index]));
                }
            }

            public event ObjectRowChangeEventHandler ObjectRowChanging;

            public event ObjectRowChangeEventHandler ObjectRowChanged;

            public event ObjectRowChangeEventHandler ObjectRowDeleting;

            public event ObjectRowChangeEventHandler ObjectRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddObjectRow(ObjectRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow AddObjectRow(
                        System.Guid AOGUID,
                        string FORMALNAME,
                        string REGIONCODE,
                        char AUTOCODE,
                        string AREACODE,
                        string CITYCODE,
                        string CTARCODE,
                        string PLACECODE,
                        string STREETCODE,
                        string EXTRCODE,
                        string SEXTCODE,
                        string OFFNAME,
                        string POSTALCODE,
                        string IFNSFL,
                        string TERRIFNSFL,
                        string IFNSUL,
                        string TERRIFNSUL,
                        string OKATO,
                        string OKTMO,
                        System.DateTime UPDATEDATE,
                        string SHORTNAME,
                        int AOLEVEL,
                        System.Guid PARENTGUID,
                        System.Guid AOID,
                        System.Guid PREVID,
                        System.Guid NEXTID,
                        string CODE,
                        string PLAINCODE,
                        int ACTSTATUS,
                        int CENTSTATUS,
                        int OPERSTATUS,
                        int CURRSTATUS,
                        System.DateTime STARTDATE,
                        System.DateTime ENDDATE,
                        System.Guid NORMDOC,
                        string LIVESTATUS,
                        string CADNUM,
                        int DIVTYPE)
            {
                ObjectRow rowObjectRow = ((ObjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    AOGUID,
                    FORMALNAME,
                    REGIONCODE,
                    AUTOCODE,
                    AREACODE,
                    CITYCODE,
                    CTARCODE,
                    PLACECODE,
                    STREETCODE,
                    EXTRCODE,
                    SEXTCODE,
                    OFFNAME,
                    POSTALCODE,
                    IFNSFL,
                    TERRIFNSFL,
                    IFNSUL,
                    TERRIFNSUL,
                    OKATO,
                    OKTMO,
                    UPDATEDATE,
                    SHORTNAME,
                    AOLEVEL,
                    PARENTGUID,
                    AOID,
                    PREVID,
                    NEXTID,
                    CODE,
                    PLAINCODE,
                    ACTSTATUS,
                    CENTSTATUS,
                    OPERSTATUS,
                    CURRSTATUS,
                    STARTDATE,
                    ENDDATE,
                    NORMDOC,
                    LIVESTATUS,
                    CADNUM,
                    DIVTYPE};
                rowObjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowObjectRow);
                return rowObjectRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ObjectDataTable cln = ((ObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ObjectDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnAOGUID = base.Columns["AOGUID"];
                this.columnFORMALNAME = base.Columns["FORMALNAME"];
                this.columnREGIONCODE = base.Columns["REGIONCODE"];
                this.columnAUTOCODE = base.Columns["AUTOCODE"];
                this.columnAREACODE = base.Columns["AREACODE"];
                this.columnCITYCODE = base.Columns["CITYCODE"];
                this.columnCTARCODE = base.Columns["CTARCODE"];
                this.columnPLACECODE = base.Columns["PLACECODE"];
                this.columnSTREETCODE = base.Columns["STREETCODE"];
                this.columnEXTRCODE = base.Columns["EXTRCODE"];
                this.columnSEXTCODE = base.Columns["SEXTCODE"];
                this.columnOFFNAME = base.Columns["OFFNAME"];
                this.columnPOSTALCODE = base.Columns["POSTALCODE"];
                this.columnIFNSFL = base.Columns["IFNSFL"];
                this.columnTERRIFNSFL = base.Columns["TERRIFNSFL"];
                this.columnIFNSUL = base.Columns["IFNSUL"];
                this.columnTERRIFNSUL = base.Columns["TERRIFNSUL"];
                this.columnOKATO = base.Columns["OKATO"];
                this.columnOKTMO = base.Columns["OKTMO"];
                this.columnUPDATEDATE = base.Columns["UPDATEDATE"];
                this.columnSHORTNAME = base.Columns["SHORTNAME"];
                this.columnAOLEVEL = base.Columns["AOLEVEL"];
                this.columnPARENTGUID = base.Columns["PARENTGUID"];
                this.columnAOID = base.Columns["AOID"];
                this.columnPREVID = base.Columns["PREVID"];
                this.columnNEXTID = base.Columns["NEXTID"];
                this.columnCODE = base.Columns["CODE"];
                this.columnPLAINCODE = base.Columns["PLAINCODE"];
                this.columnACTSTATUS = base.Columns["ACTSTATUS"];
                this.columnCENTSTATUS = base.Columns["CENTSTATUS"];
                this.columnOPERSTATUS = base.Columns["OPERSTATUS"];
                this.columnCURRSTATUS = base.Columns["CURRSTATUS"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnENDDATE = base.Columns["ENDDATE"];
                this.columnNORMDOC = base.Columns["NORMDOC"];
                this.columnLIVESTATUS = base.Columns["LIVESTATUS"];
                this.columnCADNUM = base.Columns["CADNUM"];
                this.columnDIVTYPE = base.Columns["DIVTYPE"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnAOGUID = new global::System.Data.DataColumn("AOGUID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAOGUID);
                this.columnFORMALNAME = new global::System.Data.DataColumn("FORMALNAME", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFORMALNAME);
                this.columnREGIONCODE = new global::System.Data.DataColumn("REGIONCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnREGIONCODE);
                this.columnAUTOCODE = new global::System.Data.DataColumn("AUTOCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAUTOCODE);
                this.columnAREACODE = new global::System.Data.DataColumn("AREACODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAREACODE);
                this.columnCITYCODE = new global::System.Data.DataColumn("CITYCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCITYCODE);
                this.columnCTARCODE = new global::System.Data.DataColumn("CTARCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCTARCODE);
                this.columnPLACECODE = new global::System.Data.DataColumn("PLACECODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPLACECODE);
                this.columnSTREETCODE = new global::System.Data.DataColumn("STREETCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTREETCODE);
                this.columnEXTRCODE = new global::System.Data.DataColumn("EXTRCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEXTRCODE);
                this.columnSEXTCODE = new global::System.Data.DataColumn("SEXTCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSEXTCODE);
                this.columnOFFNAME = new global::System.Data.DataColumn("OFFNAME", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOFFNAME);
                this.columnPOSTALCODE = new global::System.Data.DataColumn("POSTALCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPOSTALCODE);
                this.columnIFNSFL = new global::System.Data.DataColumn("IFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSFL);
                this.columnTERRIFNSFL = new global::System.Data.DataColumn("TERRIFNSFL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSFL);
                this.columnIFNSUL = new global::System.Data.DataColumn("IFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIFNSUL);
                this.columnTERRIFNSUL = new global::System.Data.DataColumn("TERRIFNSUL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTERRIFNSUL);
                this.columnOKATO = new global::System.Data.DataColumn("OKATO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKATO);
                this.columnOKTMO = new global::System.Data.DataColumn("OKTMO", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOKTMO);
                this.columnUPDATEDATE = new global::System.Data.DataColumn("UPDATEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUPDATEDATE);
                this.columnSHORTNAME = new global::System.Data.DataColumn("SHORTNAME", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSHORTNAME);
                this.columnAOLEVEL = new global::System.Data.DataColumn("AOLEVEL", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAOLEVEL);
                this.columnPARENTGUID = new global::System.Data.DataColumn("PARENTGUID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPARENTGUID);
                this.columnAOID = new global::System.Data.DataColumn("AOID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAOID);
                this.columnPREVID = new global::System.Data.DataColumn("PREVID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPREVID);
                this.columnNEXTID = new global::System.Data.DataColumn("NEXTID", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNEXTID);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCODE);
                this.columnPLAINCODE = new global::System.Data.DataColumn("PLAINCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPLAINCODE);
                this.columnACTSTATUS = new global::System.Data.DataColumn("ACTSTATUS", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnACTSTATUS);
                this.columnCENTSTATUS = new global::System.Data.DataColumn("CENTSTATUS", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCENTSTATUS);
                this.columnOPERSTATUS = new global::System.Data.DataColumn("OPERSTATUS", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOPERSTATUS);
                this.columnCURRSTATUS = new global::System.Data.DataColumn("CURRSTATUS", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCURRSTATUS);
                this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnENDDATE = new global::System.Data.DataColumn("ENDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnENDDATE);
                this.columnNORMDOC = new global::System.Data.DataColumn("NORMDOC", typeof(System.Guid), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNORMDOC);
                this.columnLIVESTATUS = new global::System.Data.DataColumn("LIVESTATUS", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLIVESTATUS);
                this.columnCADNUM = new global::System.Data.DataColumn("CADNUM", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCADNUM);
                this.columnDIVTYPE = new global::System.Data.DataColumn("DIVTYPE", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDIVTYPE);
                this.columnAOGUID.Namespace = "";
                this.columnAOGUID.AllowDBNull = true;
                this.columnFORMALNAME.Namespace = "";
                this.columnFORMALNAME.MaxLength = 120;
                this.columnREGIONCODE.Namespace = "";
                this.columnAUTOCODE.Namespace = "";
                this.columnAREACODE.Namespace = "";
                this.columnCITYCODE.Namespace = "";
                this.columnCTARCODE.Namespace = "";
                this.columnPLACECODE.Namespace = "";
                this.columnSTREETCODE.Namespace = "";
                this.columnEXTRCODE.Namespace = "";
                this.columnSEXTCODE.Namespace = "";
                this.columnOFFNAME.Namespace = "";
                this.columnOFFNAME.MaxLength = 120;
                this.columnPOSTALCODE.Namespace = "";
                this.columnIFNSFL.Namespace = "";
                this.columnTERRIFNSFL.Namespace = "";
                this.columnIFNSUL.Namespace = "";
                this.columnTERRIFNSUL.Namespace = "";
                this.columnOKATO.Namespace = "";
                this.columnOKTMO.Namespace = "";
                this.columnOKTMO.MaxLength = 11;
                this.columnUPDATEDATE.Namespace = "";
                this.columnSHORTNAME.Namespace = "";
                this.columnSHORTNAME.MaxLength = 10;
                this.columnAOLEVEL.Namespace = "";
                this.columnPARENTGUID.Namespace = "";
                this.columnPARENTGUID.AllowDBNull = true;
                this.columnAOID.Namespace = "";
                this.columnAOID.AllowDBNull = true;
                this.columnPREVID.Namespace = "";
                this.columnPREVID.AllowDBNull = true;
                this.columnNEXTID.Namespace = "";
                this.columnNEXTID.AllowDBNull = true;
                this.columnCODE.Namespace = "";
                this.columnCODE.MaxLength = 17;
                this.columnPLAINCODE.Namespace = "";
                this.columnPLAINCODE.MaxLength = 15;
                this.columnACTSTATUS.Namespace = "";
                this.columnCENTSTATUS.Namespace = "";
                this.columnOPERSTATUS.Namespace = "";
                this.columnCURRSTATUS.Namespace = "";
                this.columnSTARTDATE.Namespace = "";
                this.columnENDDATE.Namespace = "";
                this.columnNORMDOC.Namespace = "";
                this.columnNORMDOC.AllowDBNull = true;
                this.columnLIVESTATUS.Namespace = "";
                this.columnCADNUM.Namespace = "";
                this.columnCADNUM.MaxLength = 100;
                this.columnDIVTYPE.Namespace = "";
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow NewObjectRow()
            {
                return ((ObjectRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ObjectRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ObjectRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ObjectRowChanged != null))
                {
                    this.ObjectRowChanged(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ObjectRowChanging != null))
                {
                    this.ObjectRowChanging(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ObjectRowDeleted != null))
                {
                    this.ObjectRowDeleted(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ObjectRowDeleting != null))
                {
                    this.ObjectRowDeleting(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveObjectRow(ObjectRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AddressObjects ds = new AddressObjects();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ObjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ObjectRow : global::System.Data.DataRow
        {

            private ObjectDataTable tableObject;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObjectRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableObject = ((ObjectDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AOGUID
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableObject.AOGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'AOGUID\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.AOGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FORMALNAME
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.FORMALNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'FORMALNAME\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.FORMALNAMEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGIONCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.REGIONCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'REGIONCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.REGIONCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public char AUTOCODE
            {
                get
                {
                    try
                    {
                        return ((char)(this[this.tableObject.AUTOCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'AUTOCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.AUTOCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AREACODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.AREACODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'AREACODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.AREACODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITYCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.CITYCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CITYCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.CITYCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CTARCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.CTARCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CTARCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.CTARCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PLACECODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.PLACECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'PLACECODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.PLACECODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STREETCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.STREETCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'STREETCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.STREETCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTRCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.EXTRCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'EXTRCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.EXTRCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SEXTCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.SEXTCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'SEXTCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.SEXTCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OFFNAME
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.OFFNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OFFNAME\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.OFFNAMEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTALCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.POSTALCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'POSTALCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.POSTALCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.IFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSFL\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.IFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSFL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.TERRIFNSFLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSFL\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.TERRIFNSFLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.IFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'IFNSUL\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.IFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TERRIFNSUL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.TERRIFNSULColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'TERRIFNSUL\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.TERRIFNSULColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKATO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.OKATOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKATO\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.OKATOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKTMO
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.OKTMOColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OKTMO\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.OKTMOColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATEDATE
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableObject.UPDATEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'UPDATEDATE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.UPDATEDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHORTNAME
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.SHORTNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'SHORTNAME\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.SHORTNAMEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AOLEVEL
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableObject.AOLEVELColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'AOLEVEL\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.AOLEVELColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid PARENTGUID
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableObject.PARENTGUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'PARENTGUID\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.PARENTGUIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AOID
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableObject.AOIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'AOID\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.AOIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid PREVID
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableObject.PREVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'PREVID\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.PREVIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid NEXTID
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableObject.NEXTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NEXTID\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.NEXTIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.CODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PLAINCODE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.PLAINCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'PLAINCODE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.PLAINCODEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ACTSTATUS
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableObject.ACTSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ACTSTATUS\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ACTSTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CENTSTATUS
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableObject.CENTSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CENTSTATUS\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.CENTSTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OPERSTATUS
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableObject.OPERSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OPERSTATUS\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.OPERSTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CURRSTATUS
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableObject.CURRSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CURRSTATUS\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.CURRSTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STARTDATE
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableObject.STARTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'STARTDATE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.STARTDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ENDDATE
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableObject.ENDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ENDDATE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ENDDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid NORMDOC
            {
                get
                {
                    try
                    {
                        return ((System.Guid)(this[this.tableObject.NORMDOCColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'NORMDOC\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.NORMDOCColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIVESTATUS
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.LIVESTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'LIVESTATUS\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.LIVESTATUSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CADNUM
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.CADNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'CADNUM\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.CADNUMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DIVTYPE
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableObject.DIVTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'DIVTYPE\' в таблице \'Object\' равно DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.DIVTYPEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAOGUIDNull()
            {
                return this.IsNull(this.tableObject.AOGUIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAOGUIDNull()
            {
                this[this.tableObject.AOGUIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORMALNAMENull()
            {
                return this.IsNull(this.tableObject.FORMALNAMEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORMALNAMENull()
            {
                this[this.tableObject.FORMALNAMEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONCODENull()
            {
                return this.IsNull(this.tableObject.REGIONCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONCODENull()
            {
                this[this.tableObject.REGIONCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTOCODENull()
            {
                return this.IsNull(this.tableObject.AUTOCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTOCODENull()
            {
                this[this.tableObject.AUTOCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAREACODENull()
            {
                return this.IsNull(this.tableObject.AREACODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAREACODENull()
            {
                this[this.tableObject.AREACODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYCODENull()
            {
                return this.IsNull(this.tableObject.CITYCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYCODENull()
            {
                this[this.tableObject.CITYCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTARCODENull()
            {
                return this.IsNull(this.tableObject.CTARCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTARCODENull()
            {
                this[this.tableObject.CTARCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLACECODENull()
            {
                return this.IsNull(this.tableObject.PLACECODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLACECODENull()
            {
                this[this.tableObject.PLACECODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTREETCODENull()
            {
                return this.IsNull(this.tableObject.STREETCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTREETCODENull()
            {
                this[this.tableObject.STREETCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTRCODENull()
            {
                return this.IsNull(this.tableObject.EXTRCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTRCODENull()
            {
                this[this.tableObject.EXTRCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSEXTCODENull()
            {
                return this.IsNull(this.tableObject.SEXTCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSEXTCODENull()
            {
                this[this.tableObject.SEXTCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFFNAMENull()
            {
                return this.IsNull(this.tableObject.OFFNAMEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFFNAMENull()
            {
                this[this.tableObject.OFFNAMEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTALCODENull()
            {
                return this.IsNull(this.tableObject.POSTALCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTALCODENull()
            {
                this[this.tableObject.POSTALCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSFLNull()
            {
                return this.IsNull(this.tableObject.IFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSFLNull()
            {
                this[this.tableObject.IFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSFLNull()
            {
                return this.IsNull(this.tableObject.TERRIFNSFLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSFLNull()
            {
                this[this.tableObject.TERRIFNSFLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIFNSULNull()
            {
                return this.IsNull(this.tableObject.IFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIFNSULNull()
            {
                this[this.tableObject.IFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTERRIFNSULNull()
            {
                return this.IsNull(this.tableObject.TERRIFNSULColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTERRIFNSULNull()
            {
                this[this.tableObject.TERRIFNSULColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKATONull()
            {
                return this.IsNull(this.tableObject.OKATOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKATONull()
            {
                this[this.tableObject.OKATOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKTMONull()
            {
                return this.IsNull(this.tableObject.OKTMOColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKTMONull()
            {
                this[this.tableObject.OKTMOColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATEDATENull()
            {
                return this.IsNull(this.tableObject.UPDATEDATEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATEDATENull()
            {
                this[this.tableObject.UPDATEDATEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSHORTNAMENull()
            {
                return this.IsNull(this.tableObject.SHORTNAMEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSHORTNAMENull()
            {
                this[this.tableObject.SHORTNAMEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAOLEVELNull()
            {
                return this.IsNull(this.tableObject.AOLEVELColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAOLEVELNull()
            {
                this[this.tableObject.AOLEVELColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARENTGUIDNull()
            {
                return this.IsNull(this.tableObject.PARENTGUIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARENTGUIDNull()
            {
                this[this.tableObject.PARENTGUIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAOIDNull()
            {
                return this.IsNull(this.tableObject.AOIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAOIDNull()
            {
                this[this.tableObject.AOIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREVIDNull()
            {
                return this.IsNull(this.tableObject.PREVIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREVIDNull()
            {
                this[this.tableObject.PREVIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNEXTIDNull()
            {
                return this.IsNull(this.tableObject.NEXTIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNEXTIDNull()
            {
                this[this.tableObject.NEXTIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull()
            {
                return this.IsNull(this.tableObject.CODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull()
            {
                this[this.tableObject.CODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAINCODENull()
            {
                return this.IsNull(this.tableObject.PLAINCODEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAINCODENull()
            {
                this[this.tableObject.PLAINCODEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTSTATUSNull()
            {
                return this.IsNull(this.tableObject.ACTSTATUSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTSTATUSNull()
            {
                this[this.tableObject.ACTSTATUSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCENTSTATUSNull()
            {
                return this.IsNull(this.tableObject.CENTSTATUSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCENTSTATUSNull()
            {
                this[this.tableObject.CENTSTATUSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERSTATUSNull()
            {
                return this.IsNull(this.tableObject.OPERSTATUSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERSTATUSNull()
            {
                this[this.tableObject.OPERSTATUSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCURRSTATUSNull()
            {
                return this.IsNull(this.tableObject.CURRSTATUSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCURRSTATUSNull()
            {
                this[this.tableObject.CURRSTATUSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTARTDATENull()
            {
                return this.IsNull(this.tableObject.STARTDATEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTARTDATENull()
            {
                this[this.tableObject.STARTDATEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENDDATENull()
            {
                return this.IsNull(this.tableObject.ENDDATEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENDDATENull()
            {
                this[this.tableObject.ENDDATEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNORMDOCNull()
            {
                return this.IsNull(this.tableObject.NORMDOCColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNORMDOCNull()
            {
                this[this.tableObject.NORMDOCColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIVESTATUSNull()
            {
                return this.IsNull(this.tableObject.LIVESTATUSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIVESTATUSNull()
            {
                this[this.tableObject.LIVESTATUSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCADNUMNull()
            {
                return this.IsNull(this.tableObject.CADNUMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCADNUMNull()
            {
                this[this.tableObject.CADNUMColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIVTYPENull()
            {
                return this.IsNull(this.tableObject.DIVTYPEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIVTYPENull()
            {
                this[this.tableObject.DIVTYPEColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ObjectRowChangeEvent : global::System.EventArgs
        {

            private ObjectRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRowChangeEvent(ObjectRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
