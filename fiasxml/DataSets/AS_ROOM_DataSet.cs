//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("Rooms")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class Rooms : global::System.Data.DataSet {
    
    private RoomDataTable tableRoom;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public Rooms() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected Rooms(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["Room"] != null)) {
                base.Tables.Add(new RoomDataTable(ds.Tables["Room"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public RoomDataTable Room {
        get {
            return this.tableRoom;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        Rooms cln = ((Rooms)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Room"] != null)) {
                base.Tables.Add(new RoomDataTable(ds.Tables["Room"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableRoom = ((RoomDataTable)(base.Tables["Room"]));
        if ((initTable == true)) {
            if ((this.tableRoom != null)) {
                this.tableRoom.InitVars();
            }
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "Rooms";
        this.Prefix = "";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableRoom = new RoomDataTable();
        base.Tables.Add(this.tableRoom);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeRoom() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        Rooms ds = new Rooms();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void RoomRowChangeEventHandler(object sender, RoomRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class RoomDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnROOMGUID;
        
        private global::System.Data.DataColumn columnFLATNUMBER;
        
        private global::System.Data.DataColumn columnFLATTYPE;
        
        private global::System.Data.DataColumn columnROOMNUMBER;
        
        private global::System.Data.DataColumn columnROOMTYPE;
        
        private global::System.Data.DataColumn columnREGIONCODE;
        
        private global::System.Data.DataColumn columnPOSTALCODE;
        
        private global::System.Data.DataColumn columnUPDATEDATE;
        
        private global::System.Data.DataColumn columnHOUSEGUID;
        
        private global::System.Data.DataColumn columnROOMID;
        
        private global::System.Data.DataColumn columnPREVID;
        
        private global::System.Data.DataColumn columnNEXTID;
        
        private global::System.Data.DataColumn columnSTARTDATE;
        
        private global::System.Data.DataColumn columnENDDATE;
        
        private global::System.Data.DataColumn columnLIVESTATUS;
        
        private global::System.Data.DataColumn columnNORMDOC;
        
        private global::System.Data.DataColumn columnOPERSTATUS;
        
        private global::System.Data.DataColumn columnCADNUM;
        
        private global::System.Data.DataColumn columnROOMCADNUM;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoomDataTable() {
            this.TableName = "Room";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal RoomDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RoomDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ROOMGUIDColumn {
            get {
                return this.columnROOMGUID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FLATNUMBERColumn {
            get {
                return this.columnFLATNUMBER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FLATTYPEColumn {
            get {
                return this.columnFLATTYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ROOMNUMBERColumn {
            get {
                return this.columnROOMNUMBER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ROOMTYPEColumn {
            get {
                return this.columnROOMTYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn REGIONCODEColumn {
            get {
                return this.columnREGIONCODE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn POSTALCODEColumn {
            get {
                return this.columnPOSTALCODE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn UPDATEDATEColumn {
            get {
                return this.columnUPDATEDATE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn HOUSEGUIDColumn {
            get {
                return this.columnHOUSEGUID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ROOMIDColumn {
            get {
                return this.columnROOMID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn PREVIDColumn {
            get {
                return this.columnPREVID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NEXTIDColumn {
            get {
                return this.columnNEXTID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STARTDATEColumn {
            get {
                return this.columnSTARTDATE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ENDDATEColumn {
            get {
                return this.columnENDDATE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn LIVESTATUSColumn {
            get {
                return this.columnLIVESTATUS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NORMDOCColumn {
            get {
                return this.columnNORMDOC;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn OPERSTATUSColumn {
            get {
                return this.columnOPERSTATUS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CADNUMColumn {
            get {
                return this.columnCADNUM;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ROOMCADNUMColumn {
            get {
                return this.columnROOMCADNUM;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoomRow this[int index] {
            get {
                return ((RoomRow)(this.Rows[index]));
            }
        }
        
        public event RoomRowChangeEventHandler RoomRowChanging;
        
        public event RoomRowChangeEventHandler RoomRowChanged;
        
        public event RoomRowChangeEventHandler RoomRowDeleting;
        
        public event RoomRowChangeEventHandler RoomRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddRoomRow(RoomRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoomRow AddRoomRow(
                    string ROOMGUID, 
                    string FLATNUMBER, 
                    int FLATTYPE, 
                    string ROOMNUMBER, 
                    int ROOMTYPE, 
                    string REGIONCODE, 
                    string POSTALCODE, 
                    System.DateTime UPDATEDATE, 
                    string HOUSEGUID, 
                    string ROOMID, 
                    string PREVID, 
                    string NEXTID, 
                    System.DateTime STARTDATE, 
                    System.DateTime ENDDATE, 
                    sbyte LIVESTATUS, 
                    string NORMDOC, 
                    long OPERSTATUS, 
                    string CADNUM, 
                    string ROOMCADNUM) {
            RoomRow rowRoomRow = ((RoomRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    ROOMGUID,
                    FLATNUMBER,
                    FLATTYPE,
                    ROOMNUMBER,
                    ROOMTYPE,
                    REGIONCODE,
                    POSTALCODE,
                    UPDATEDATE,
                    HOUSEGUID,
                    ROOMID,
                    PREVID,
                    NEXTID,
                    STARTDATE,
                    ENDDATE,
                    LIVESTATUS,
                    NORMDOC,
                    OPERSTATUS,
                    CADNUM,
                    ROOMCADNUM};
            rowRoomRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowRoomRow);
            return rowRoomRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            RoomDataTable cln = ((RoomDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new RoomDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnROOMGUID = base.Columns["ROOMGUID"];
            this.columnFLATNUMBER = base.Columns["FLATNUMBER"];
            this.columnFLATTYPE = base.Columns["FLATTYPE"];
            this.columnROOMNUMBER = base.Columns["ROOMNUMBER"];
            this.columnROOMTYPE = base.Columns["ROOMTYPE"];
            this.columnREGIONCODE = base.Columns["REGIONCODE"];
            this.columnPOSTALCODE = base.Columns["POSTALCODE"];
            this.columnUPDATEDATE = base.Columns["UPDATEDATE"];
            this.columnHOUSEGUID = base.Columns["HOUSEGUID"];
            this.columnROOMID = base.Columns["ROOMID"];
            this.columnPREVID = base.Columns["PREVID"];
            this.columnNEXTID = base.Columns["NEXTID"];
            this.columnSTARTDATE = base.Columns["STARTDATE"];
            this.columnENDDATE = base.Columns["ENDDATE"];
            this.columnLIVESTATUS = base.Columns["LIVESTATUS"];
            this.columnNORMDOC = base.Columns["NORMDOC"];
            this.columnOPERSTATUS = base.Columns["OPERSTATUS"];
            this.columnCADNUM = base.Columns["CADNUM"];
            this.columnROOMCADNUM = base.Columns["ROOMCADNUM"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnROOMGUID = new global::System.Data.DataColumn("ROOMGUID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnROOMGUID);
            this.columnFLATNUMBER = new global::System.Data.DataColumn("FLATNUMBER", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnFLATNUMBER);
            this.columnFLATTYPE = new global::System.Data.DataColumn("FLATTYPE", typeof(int), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnFLATTYPE);
            this.columnROOMNUMBER = new global::System.Data.DataColumn("ROOMNUMBER", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnROOMNUMBER);
            this.columnROOMTYPE = new global::System.Data.DataColumn("ROOMTYPE", typeof(int), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnROOMTYPE);
            this.columnREGIONCODE = new global::System.Data.DataColumn("REGIONCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnREGIONCODE);
            this.columnPOSTALCODE = new global::System.Data.DataColumn("POSTALCODE", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnPOSTALCODE);
            this.columnUPDATEDATE = new global::System.Data.DataColumn("UPDATEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnUPDATEDATE);
            this.columnHOUSEGUID = new global::System.Data.DataColumn("HOUSEGUID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnHOUSEGUID);
            this.columnROOMID = new global::System.Data.DataColumn("ROOMID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnROOMID);
            this.columnPREVID = new global::System.Data.DataColumn("PREVID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnPREVID);
            this.columnNEXTID = new global::System.Data.DataColumn("NEXTID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNEXTID);
            this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSTARTDATE);
            this.columnENDDATE = new global::System.Data.DataColumn("ENDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnENDDATE);
            this.columnLIVESTATUS = new global::System.Data.DataColumn("LIVESTATUS", typeof(sbyte), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnLIVESTATUS);
            this.columnNORMDOC = new global::System.Data.DataColumn("NORMDOC", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNORMDOC);
            this.columnOPERSTATUS = new global::System.Data.DataColumn("OPERSTATUS", typeof(long), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnOPERSTATUS);
            this.columnCADNUM = new global::System.Data.DataColumn("CADNUM", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnCADNUM);
            this.columnROOMCADNUM = new global::System.Data.DataColumn("ROOMCADNUM", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnROOMCADNUM);
            this.columnROOMGUID.AllowDBNull = false;
            this.columnROOMGUID.Namespace = "";
            this.columnFLATNUMBER.AllowDBNull = false;
            this.columnFLATNUMBER.Namespace = "";
            this.columnFLATNUMBER.MaxLength = 50;
            this.columnFLATTYPE.AllowDBNull = false;
            this.columnFLATTYPE.Namespace = "";
            this.columnROOMNUMBER.Namespace = "";
            this.columnROOMNUMBER.MaxLength = 50;
            this.columnROOMTYPE.Namespace = "";
            this.columnREGIONCODE.AllowDBNull = false;
            this.columnREGIONCODE.Namespace = "";
            this.columnPOSTALCODE.Namespace = "";
            this.columnUPDATEDATE.AllowDBNull = false;
            this.columnUPDATEDATE.Namespace = "";
            this.columnHOUSEGUID.AllowDBNull = false;
            this.columnHOUSEGUID.Namespace = "";
            this.columnROOMID.AllowDBNull = false;
            this.columnROOMID.Namespace = "";
            this.columnPREVID.Namespace = "";
            this.columnNEXTID.Namespace = "";
            this.columnSTARTDATE.AllowDBNull = false;
            this.columnSTARTDATE.Namespace = "";
            this.columnENDDATE.AllowDBNull = false;
            this.columnENDDATE.Namespace = "";
            this.columnLIVESTATUS.AllowDBNull = false;
            this.columnLIVESTATUS.Namespace = "";
            this.columnNORMDOC.Namespace = "";
            this.columnOPERSTATUS.AllowDBNull = false;
            this.columnOPERSTATUS.Namespace = "";
            this.columnCADNUM.Namespace = "";
            this.columnCADNUM.MaxLength = 100;
            this.columnROOMCADNUM.Namespace = "";
            this.columnROOMCADNUM.MaxLength = 100;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoomRow NewRoomRow() {
            return ((RoomRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new RoomRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(RoomRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.RoomRowChanged != null)) {
                this.RoomRowChanged(this, new RoomRowChangeEvent(((RoomRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.RoomRowChanging != null)) {
                this.RoomRowChanging(this, new RoomRowChangeEvent(((RoomRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.RoomRowDeleted != null)) {
                this.RoomRowDeleted(this, new RoomRowChangeEvent(((RoomRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.RoomRowDeleting != null)) {
                this.RoomRowDeleting(this, new RoomRowChangeEvent(((RoomRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveRoomRow(RoomRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Rooms ds = new Rooms();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "RoomDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class RoomRow : global::System.Data.DataRow {
        
        private RoomDataTable tableRoom;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal RoomRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableRoom = ((RoomDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ROOMGUID {
            get {
                return ((string)(this[this.tableRoom.ROOMGUIDColumn]));
            }
            set {
                this[this.tableRoom.ROOMGUIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FLATNUMBER {
            get {
                return ((string)(this[this.tableRoom.FLATNUMBERColumn]));
            }
            set {
                this[this.tableRoom.FLATNUMBERColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int FLATTYPE {
            get {
                return ((int)(this[this.tableRoom.FLATTYPEColumn]));
            }
            set {
                this[this.tableRoom.FLATTYPEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ROOMNUMBER {
            get {
                try {
                    return ((string)(this[this.tableRoom.ROOMNUMBERColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'ROOMNUMBER\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.ROOMNUMBERColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ROOMTYPE {
            get {
                try {
                    return ((int)(this[this.tableRoom.ROOMTYPEColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'ROOMTYPE\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.ROOMTYPEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string REGIONCODE {
            get {
                return ((string)(this[this.tableRoom.REGIONCODEColumn]));
            }
            set {
                this[this.tableRoom.REGIONCODEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string POSTALCODE {
            get {
                try {
                    return ((string)(this[this.tableRoom.POSTALCODEColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'POSTALCODE\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.POSTALCODEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime UPDATEDATE {
            get {
                return ((global::System.DateTime)(this[this.tableRoom.UPDATEDATEColumn]));
            }
            set {
                this[this.tableRoom.UPDATEDATEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string HOUSEGUID {
            get {
                return ((string)(this[this.tableRoom.HOUSEGUIDColumn]));
            }
            set {
                this[this.tableRoom.HOUSEGUIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ROOMID {
            get {
                return ((string)(this[this.tableRoom.ROOMIDColumn]));
            }
            set {
                this[this.tableRoom.ROOMIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PREVID {
            get {
                try {
                    return ((string)(this[this.tableRoom.PREVIDColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'PREVID\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.PREVIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NEXTID {
            get {
                try {
                    return ((string)(this[this.tableRoom.NEXTIDColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'NEXTID\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.NEXTIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime STARTDATE {
            get {
                return ((global::System.DateTime)(this[this.tableRoom.STARTDATEColumn]));
            }
            set {
                this[this.tableRoom.STARTDATEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime ENDDATE {
            get {
                return ((global::System.DateTime)(this[this.tableRoom.ENDDATEColumn]));
            }
            set {
                this[this.tableRoom.ENDDATEColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sbyte LIVESTATUS {
            get {
                return ((sbyte)(this[this.tableRoom.LIVESTATUSColumn]));
            }
            set {
                this[this.tableRoom.LIVESTATUSColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NORMDOC {
            get {
                try {
                    return ((string)(this[this.tableRoom.NORMDOCColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'NORMDOC\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.NORMDOCColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public long OPERSTATUS {
            get {
                return ((long)(this[this.tableRoom.OPERSTATUSColumn]));
            }
            set {
                this[this.tableRoom.OPERSTATUSColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CADNUM {
            get {
                try {
                    return ((string)(this[this.tableRoom.CADNUMColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'CADNUM\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.CADNUMColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ROOMCADNUM {
            get {
                try {
                    return ((string)(this[this.tableRoom.ROOMCADNUMColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Значение для столбца \'ROOMCADNUM\' в таблице \'Room\' равно DBNull.", e);
                }
            }
            set {
                this[this.tableRoom.ROOMCADNUMColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsROOMNUMBERNull() {
            return this.IsNull(this.tableRoom.ROOMNUMBERColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetROOMNUMBERNull() {
            this[this.tableRoom.ROOMNUMBERColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsROOMTYPENull() {
            return this.IsNull(this.tableRoom.ROOMTYPEColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetROOMTYPENull() {
            this[this.tableRoom.ROOMTYPEColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsPOSTALCODENull() {
            return this.IsNull(this.tableRoom.POSTALCODEColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetPOSTALCODENull() {
            this[this.tableRoom.POSTALCODEColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsPREVIDNull() {
            return this.IsNull(this.tableRoom.PREVIDColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetPREVIDNull() {
            this[this.tableRoom.PREVIDColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNEXTIDNull() {
            return this.IsNull(this.tableRoom.NEXTIDColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNEXTIDNull() {
            this[this.tableRoom.NEXTIDColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNORMDOCNull() {
            return this.IsNull(this.tableRoom.NORMDOCColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNORMDOCNull() {
            this[this.tableRoom.NORMDOCColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCADNUMNull() {
            return this.IsNull(this.tableRoom.CADNUMColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCADNUMNull() {
            this[this.tableRoom.CADNUMColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsROOMCADNUMNull() {
            return this.IsNull(this.tableRoom.ROOMCADNUMColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetROOMCADNUMNull() {
            this[this.tableRoom.ROOMCADNUMColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomRowChangeEvent : global::System.EventArgs {
        
        private RoomRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoomRowChangeEvent(RoomRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoomRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
